local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local playerName = player.Name
local playerGui = player:WaitForChild("PlayerGui")
local character = player.Character or player.CharacterAdded:Wait()
local anchoredParts = {}
local isAnchoredMode = false
local SPEED_MULTIPLIER = 100
local BASE_STEP = 0.015
local ASCENT_SPEED = 0.5
local DESCENT_SPEED = 0.5
local isJumping = false
local isDescending = false

-- Создаем интерфейс
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "AnchoredMovementUI"
screenGui.ResetOnSpawn = false
screenGui.Parent = playerGui

local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 200, 0, 100)
frame.Position = UDim2.new(0.5, -100, 0, 10)
frame.AnchorPoint = Vector2.new(0.5, 0)
frame.BackgroundTransparency = 0.7
frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
frame.Active = true
frame.Draggable = true
frame.Selectable = true
frame.Parent = screenGui

local dragHandle = Instance.new("TextLabel")
dragHandle.Text = "GitHub: NellyStart (Press Q for use)"
dragHandle.Size = UDim2.new(1, 0, 0, 20)
dragHandle.TextColor3 = Color3.new(1, 1, 1)
dragHandle.BackgroundTransparency = 0.5
dragHandle.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
dragHandle.Parent = frame

local speedLabel = Instance.new("TextLabel")
speedLabel.Text = "Speed Multiplier: "..SPEED_MULTIPLIER
speedLabel.Size = UDim2.new(1, 0, 0, 20)
speedLabel.Position = UDim2.new(0, 0, 0, 25)
speedLabel.TextColor3 = Color3.new(1, 1, 1)
speedLabel.BackgroundTransparency = 1
speedLabel.Name = "SpeedLabel"
speedLabel.Parent = frame

local textBox = Instance.new("TextBox")
textBox.Size = UDim2.new(0.6, 0, 0, 25)
textBox.Position = UDim2.new(0.2, 0, 0, 50)
textBox.PlaceholderText = "Enter speed"
textBox.Text = tostring(SPEED_MULTIPLIER)
textBox.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
textBox.TextColor3 = Color3.new(1, 1, 1)
textBox.Parent = frame

-- Кэшированные функции
local newCFrame = CFrame.new
local newVector3 = Vector3.new

local function updateSpeedDisplay()
    speedLabel.Text = "Speed Multiplier: "..SPEED_MULTIPLIER
    textBox.Text = tostring(SPEED_MULTIPLIER)
end

textBox.FocusLost:Connect(function(enterPressed)
    if enterPressed then
        local newSpeed = tonumber(textBox.Text)
        if newSpeed and newSpeed > 0 then
            SPEED_MULTIPLIER = newSpeed
            updateSpeedDisplay()
        else
            textBox.Text = tostring(SPEED_MULTIPLIER)
        end
    end
end)

-- Находим модель игрока в Workspace
local function findPlayerModel()
    -- Сначала проверяем стандартное расположение (Player.Character)
    if character and character.Name == playerName then
        return character
    end
    
    -- Если нет, ищем в Workspace
    local playerModel = workspace:FindFirstChild(playerName)
    if playerModel and playerModel:IsA("Model") then
        return playerModel
    end
    
    return nil
end

-- Получаем все BasePart из модели
local function getPartsFromModel(model)
    local parts = {}
    if not model then return parts end
    
    for _, child in ipairs(model:GetDescendants()) do
        if child:IsA("BasePart") then
            table.insert(parts, child)
        end
    end
    return parts
end

local function toggleAnchoredMode()
    local playerModel = findPlayerModel()
    if not playerModel then 
        print("Player model not found!")
        return 
    end
    
    isAnchoredMode = not isAnchoredMode
    anchoredParts = getPartsFromModel(playerModel)
    
    local rootPart = playerModel:FindFirstChild("HumanoidRootPart") or 
                     playerModel:FindFirstChild("Torso") or 
                     playerModel:FindFirstChildWhichIsA("BasePart")
    if not rootPart then return end
    
    local rootCFrame = rootPart.CFrame
    local partsRelative = {}
    
    for _, part in ipairs(anchoredParts) do
        partsRelative[part] = rootCFrame:PointToObjectSpace(part.Position)
    end
    
    for part, relativePos in pairs(partsRelative) do
        part.Anchored = isAnchoredMode
        part.Velocity = newVector3()
        part.RotVelocity = newVector3()
        
        if isAnchoredMode then
            part.CFrame = rootCFrame * newCFrame(relativePos)
        end
    end
    
    print(string.format("Anchored mode: %s | Affected parts: %d", isAnchoredMode, #anchoredParts))
end

local function updateMovement(dt)
    if not isAnchoredMode or #anchoredParts == 0 then return end
    
    local playerModel = findPlayerModel()
    if not playerModel then return end
    
    local rootPart = playerModel:FindFirstChild("HumanoidRootPart") or 
                     playerModel:FindFirstChild("Torso") or 
                     playerModel:FindFirstChildWhichIsA("BasePart")
    if not rootPart then return end
    
    local rootPos = rootPart.Position
    local partsRelative = {}
    for _, part in ipairs(anchoredParts) do
        partsRelative[part] = part.Position - rootPos
    end
    
    local moveVector = newVector3()
    local humanoid = playerModel:FindFirstChildOfClass("Humanoid")
    
    if humanoid then
        local moveDirection = humanoid.MoveDirection
        if moveDirection.Magnitude > 0 then
            moveVector = moveVector + (moveDirection.Unit * BASE_STEP * SPEED_MULTIPLIER)
        end
    end
    
    if isJumping then
        moveVector = moveVector + newVector3(0, ASCENT_SPEED, 0)
    end
    
    if isDescending then
        moveVector = moveVector + newVector3(0, -DESCENT_SPEED, 0)
    end
    
    if moveVector.Magnitude > 0 then
        local newRootPos = rootPos + moveVector
        rootPart.CFrame = newCFrame(newRootPos, newRootPos + moveVector)
        
        for part, relativePos in pairs(partsRelative) do
            part.CFrame = newCFrame(newRootPos + relativePos)
        end
    end
end

-- Обработчики ввода
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed then
        if input.KeyCode == Enum.KeyCode.Q then
            toggleAnchoredMode()
        elseif input.KeyCode == Enum.KeyCode.Space then
            isJumping = true
        elseif input.KeyCode == Enum.KeyCode.LeftControl then
            isDescending = true
        end
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.Space then
        isJumping = false
    elseif input.KeyCode == Enum.KeyCode.LeftControl then
        isDescending = false
    end
end)

-- Обновляем модель при изменении персонажа
player.CharacterAdded:Connect(function(newCharacter)
    character = newCharacter
    if isAnchoredMode then
        toggleAnchoredMode()
    end
end)

-- Инициализация
RunService.Heartbeat:Connect(updateMovement)
updateSpeedDisplay()
print("Optimized script loaded! Controls: Q - toggle, Space - up, Shift - down")
